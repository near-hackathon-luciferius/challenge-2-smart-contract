{"version":3,"sources":["components/Form.jsx","components/SignIn.jsx","App.js","index.js","config.js"],"names":["Form","onSubmit","currentUser","id","accountId","className","htmlFor","autoComplete","autoFocus","required","defaultValue","max","Big","balance","div","min","step","type","title","SignIn","version","require","BOATLOAD_OF_GAS","times","toFixed","App","contract","nearConfig","wallet","useState","answer","setAnswer","onClick","signOut","window","location","replace","origin","pathname","requestSignIn","contractId","contractName","methodNames","hello","name","e","preventDefault","target","elements","fieldset","name_prompt","donation","disabled","value","then","focus","a","getConfig","process","NEAR_ENV","keyStore","nearAPI","BrowserLocalStorageKeyStore","near","walletConnection","getAccountId","account","state","amount","viewMethods","changeMethods","sender","nearInitPromise","initContract","ReactDOM","render","document","getElementById","CONTRACT_NAME","module","exports","env","networkId","nodeUrl","walletUrl","helperUrl","keyPath","HOME","masterAccount","Error"],"mappings":"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","file":"static/js/main.9f8db68e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Big from 'big.js';\n\nexport default function Form({ onSubmit, currentUser }) {\n  return (\n    <form onSubmit={onSubmit}>\n      <fieldset id=\"fieldset\">\n        <p>Say hello, { currentUser.accountId }!</p>\n        <p className=\"highlight\">\n          <label htmlFor=\"name\">Your name:</label>\n          <input\n            autoComplete=\"off\"\n            autoFocus\n            id=\"name_prompt\"\n            required\n          />\n        </p>\n        <p>\n          <label htmlFor=\"donation\">Donation (optional):</label>\n          <input\n            autoComplete=\"off\"\n            defaultValue={'0'}\n            id=\"donation\"\n            max={Big(currentUser.balance).div(10 ** 24)}\n            min=\"0\"\n            step=\"0.01\"\n            type=\"number\"\n          />\n          <span title=\"NEAR Tokens\">Ⓝ</span>\n        </p>\n        <button type=\"submit\">\n          Hello!\n        </button>\n      </fieldset>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  currentUser: PropTypes.shape({\n    accountId: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired\n  })\n};\n","import React from 'react';\n\nexport default function SignIn() {\n  return (\n    <>\n      <p>\n          This app demonstrates a key element of NEAR’s UX: once an app has\n          permission to make calls on behalf of a user (that is, once a user\n          signs in), the app can make calls to the blockchain for them without\n          prompting extra confirmation. So you’ll see that if you don’t\n          include a donation, your name gets posted right away.\n      </p>\n      <p>\n          But if you do add a donation, then NEAR will double-check that\n          you’re ok with sending money to this app.\n      </p>\n      <p>\n          Go ahead and sign in to try it out!\n      </p>\n    </>\n  );\n}\n","import './App.css';\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Big from 'big.js';\nimport Form from './components/Form';\nimport SignIn from './components/SignIn';\nvar version = require('../package.json').version;\n\nconst SUGGESTED_DONATION = '0';\nconst BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();\n\nconst App = ({ contract, currentUser, nearConfig, wallet }) => {\n  const [answer, setAnswer] = useState(\"No transaction executed.\");\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const { fieldset, name_prompt, donation } = e.target.elements;\n\n    fieldset.disabled = true;\n    \n    contract.hello(\n      { name: name_prompt.value },\n      BOATLOAD_OF_GAS,\n      Big(donation.value || '0').times(10 ** 24).toFixed()\n    ).then((answer) => {\n      fieldset.disabled = false;\n      donation.value = SUGGESTED_DONATION;\n      name_prompt.value = '';\n      name_prompt.focus();\n      setAnswer(answer);\n    });\n  };\n  \n  const signIn = () => {\n    wallet.requestSignIn(\n      {contractId: nearConfig.contractName, methodNames: [contract.hello.name]}, //contract requesting access\n      'NEAR Challenge #2 - Hello World', //optional name\n      null, //optional URL to redirect to if the sign in was successful\n      null //optional URL to redirect to if the sign in was NOT successful\n    );\n  };\n\n  const signOut = () => {\n    wallet.signOut();\n    window.location.replace(window.location.origin + window.location.pathname);\n  };\n\n  return (\n    <main>\n      <header>\n        <h1>NEAR Challenge #2 - Hello World - {version}</h1>\n        { currentUser\n          ? <button onClick={signOut}>Log out</button>\n          : <button onClick={signIn}>Log in</button>\n        }\n      </header>      \n      <h3>Status: { answer }</h3>\n      { currentUser\n        ? <Form onSubmit={onSubmit} currentUser={currentUser} />\n        : <SignIn/>\n      }\n    </main>\n  );\n}\n\nApp.propTypes = {\n  contract: PropTypes.shape({\n    hello: PropTypes.func.isRequired\n  }).isRequired,\n  currentUser: PropTypes.shape({\n    accountId: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired\n  }),\n  nearConfig: PropTypes.shape({\n    contractName: PropTypes.string.isRequired\n  }).isRequired,\n  wallet: PropTypes.shape({\n    requestSignIn: PropTypes.func.isRequired,\n    signOut: PropTypes.func.isRequired\n  }).isRequired\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from \"react-router-dom\";\nimport App from './App';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\n\n// Initializing contract\nasync function initContract() {\n  // get network configuration values from config.js\n  // based on the network ID we pass to getConfig()\n  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');\n\n  // create a keyStore for signing transactions using the user's key\n  // which is located in the browser local storage after user logs in\n  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n\n  // Initializing connection to the NEAR testnet\n  const near = await nearAPI.connect({ keyStore, ...nearConfig });\n\n  // Initialize wallet connection\n  const walletConnection = new nearAPI.WalletConnection(near);\n\n  // Load in user's account data\n  let currentUser;\n  if (walletConnection.getAccountId()) {\n    currentUser = {\n      // Gets the accountId as a string\n      accountId: walletConnection.getAccountId(),\n      // Gets the user's token balance\n      balance: (await walletConnection.account().state()).amount,\n    };\n  }\n\n  // Initializing our contract APIs by contract name and configuration\n  const contract = await new nearAPI.Contract(\n    // User's accountId as a string\n    walletConnection.account(),\n    // accountId of the contract we will be loading\n    // NOTE: All contracts on NEAR are deployed to an account and\n    // accounts can only have one contract deployed to them.\n    nearConfig.contractName,\n    {\n      // View methods are read-only – they don't modify the state, but usually return some value\n      viewMethods: [],\n      // Change methods can modify the state, but you don't receive the returned value when called\n      changeMethods: ['hello'],\n      // Sender is the account ID to initialize transactions.\n      // getAccountId() will return empty string if user is still unauthorized\n      sender: walletConnection.getAccountId(),\n    }\n  );\n\n  return { contract, currentUser, nearConfig, walletConnection };\n}\n\nwindow.nearInitPromise = initContract().then(\n  ({ contract, currentUser, nearConfig, walletConnection }) => {\n    ReactDOM.render(\n\t  <Router>\n        <App\n          contract={contract}\n          currentUser={currentUser}\n          nearConfig={nearConfig}\n          wallet={walletConnection}\n        />\n\t  </Router>,\n      document.getElementById('root')\n    );\n  }\n);\n\n","const CONTRACT_NAME = process.env.CONTRACT_NAME || 'hello.cryptosketches.testnet';\n\nfunction getConfig(env) {\n  switch(env) {\n    case 'production':\n    case 'mainnet':\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org'\n      };\n    case 'development':\n    case 'testnet':\n      return {\n        networkId: 'testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.testnet.near.org',\n        helperUrl: 'https://helper.testnet.near.org'\n      };\n    case 'betanet':\n      return {\n        networkId: 'betanet',\n        nodeUrl: 'https://rpc.betanet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.betanet.near.org',\n        helperUrl: 'https://helper.betanet.near.org'\n      };\n    case 'local':\n      return {\n        networkId: 'local',\n        nodeUrl: 'http://localhost:3030',\n        keyPath: `${process.env.HOME}/.near/validator_key.json`,\n        walletUrl: 'http://localhost:4000/wallet',\n        contractName: CONTRACT_NAME\n      };\n    case 'test':\n    case 'ci':\n      return {\n        networkId: 'shared-test',\n        nodeUrl: 'https://rpc.ci-testnet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    case 'ci-betanet':\n      return {\n        networkId: 'shared-test-staging',\n        nodeUrl: 'https://rpc.ci-betanet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    default:\n      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);\n  }\n}\n\nmodule.exports = getConfig;\n"],"sourceRoot":""}