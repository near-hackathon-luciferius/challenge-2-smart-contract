{"version":3,"sources":["components/Form.jsx","components/SignIn.jsx","App.js","index.js","config.js"],"names":["Form","onSubmit","currentUser","id","accountId","className","htmlFor","autoComplete","autoFocus","required","type","value","title","SignIn","version","require","BOATLOAD_OF_GAS","Big","times","toFixed","App","contract","nearConfig","wallet","lastTransaction","provider","errorMessage","useState","decodeURI","answer","setAnswer","useEffect","txHash","a","txStatus","result","receipts_outcome","outcome","logs","pop","get_last_message","account_id","getState","getLastRememberedMessage","window","history","pushState","location","origin","pathname","onClick","signOut","replace","requestSignIn","contractId","contractName","methodNames","hello","name","e","preventDefault","target","elements","fieldset","name_prompt","disabled","nativeEvent","submitter","then","focus","remember_me","getConfig","process","NEAR_ENV","keyStore","nearAPI","BrowserLocalStorageKeyStore","near","walletConnection","getAccountId","account","state","amount","balance","viewMethods","changeMethods","sender","connection","nearInitPromise","initContract","urlParams","URLSearchParams","search","has","get","ReactDOM","render","document","getElementById","CONTRACT_NAME","module","exports","env","networkId","nodeUrl","walletUrl","helperUrl","keyPath","HOME","masterAccount","Error"],"mappings":"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","file":"static/js/main.d5ea5701.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Form({ onSubmit, currentUser }) {\n  return (\n    <form onSubmit={onSubmit}>\n      <fieldset id=\"fieldset\">\n        <p>Say hello, { currentUser.accountId }!</p>\n        <p className=\"highlight\">\n          <label htmlFor=\"name\">Your name:</label>\n          <input\n            autoComplete=\"off\"\n            autoFocus\n            id=\"name_prompt\"\n            required\n          />\n        </p>\n        <button type=\"submit\" value=\"hello\" className=\"margin_button\"\n                title=\"Executes the method hello which returns a message from NEAR. This does not require a confirmation.\">\n          Hello\n        </button>\n        <button type=\"submit\" value=\"remember\" className=\"margin_button\"\n                title=\"Executes the method remember_me which stores the given name in the smart contract. This does require a confirmation.\">\n          Remember me\n        </button>\n      </fieldset>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  currentUser: PropTypes.shape({\n    accountId: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired\n  })\n};\n","import React from 'react';\n\nexport default function SignIn() {\n  return (\n    <>\n      <p>\n          This app demonstrates a key element of NEAR’s UX: once an app has\n          permission to make calls on behalf of a user (that is, once a user\n          signs in), the app can make calls to the blockchain for them without\n          prompting extra confirmation. So you’ll see that if you use the hello\n          button, you will get a response right away.\n      </p>\n      <p>\n          But if you do use the remember me button, then NEAR will double-check that\n          you’re ok with sending money to this app for remebering the name.\n      </p>\n      <p>\n          Go ahead and sign in to try it out!\n      </p>\n    </>\n  );\n}\n","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Big from 'big.js';\nimport Form from './components/Form';\nimport SignIn from './components/SignIn';\nvar version = require('../package.json').version;\n\nconst BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();\n\nconst App = ({ contract, currentUser, nearConfig, wallet, lastTransaction, provider, errorMessage }) => {\n  const [answer, setAnswer] = useState(errorMessage ? decodeURI(errorMessage) : currentUser ? \"Thinking please wait...\" : \"Please login first.\");\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const { fieldset, name_prompt } = e.target.elements;\n\n    fieldset.disabled = true;\n    //Big(donation.value || '0').times(10 ** 24).toFixed()\n    if (e.nativeEvent.submitter.value === 'hello') {        \n        contract.hello(\n          { name: name_prompt.value },\n          BOATLOAD_OF_GAS,\n          0\n        ).then((answer) => {\n          fieldset.disabled = false;\n          name_prompt.value = '';\n          name_prompt.focus();\n          setAnswer(answer);\n        });\n    }\n    else {\n        contract.remember_me(\n          { name: name_prompt.value },\n          BOATLOAD_OF_GAS,\n          Big('0.00045').times(10 ** 24).toFixed()\n        ).then((answer) => {\n          fieldset.disabled = false;\n          name_prompt.value = '';\n          name_prompt.focus();\n          setAnswer(answer);\n        });\n    }\n  };\n  \n  const signIn = () => {\n    wallet.requestSignIn(\n      {contractId: nearConfig.contractName, methodNames: [contract.hello.name]}, //contract requesting access\n      'NEAR Challenge #2 - Hello World', //optional name\n      null, //optional URL to redirect to if the sign in was successful\n      null //optional URL to redirect to if the sign in was NOT successful\n    );\n  };\n\n  const signOut = () => {\n    wallet.signOut();\n    window.location.replace(window.location.origin + window.location.pathname);\n  };\n  \n  useEffect(() => {\n      if (currentUser && lastTransaction && !errorMessage) {\n          getState(lastTransaction, currentUser.accountId);\n      }\n      else if (currentUser && !errorMessage){\n          getLastRememberedMessage(currentUser.accountId);\n      }\n      window.history.pushState({}, \"\", window.location.origin + window.location.pathname);\n\n      async function getState(txHash, accountId) {\n        const result = await provider.txStatus(txHash, accountId);\n        setAnswer(result.receipts_outcome[0].outcome.logs.pop());\n      }\n      \n      async function getLastRememberedMessage(accountId) {\n        const result = await contract.get_last_message({ account_id: accountId });\n        setAnswer(result);\n      }\n  }, [currentUser, errorMessage, lastTransaction, contract, provider]);\n  \n\n\n  return (\n    <main>\n      <header>\n        <h1>NEAR Challenge #2 - Hello World - {version}</h1>\n        { currentUser\n          ? <button onClick={signOut} className=\"login_button\">Log out</button>\n          : <button onClick={signIn} className=\"login_button\">Log in</button>\n        }\n      </header>      \n      <h5>Status: { answer }</h5>\n      { currentUser\n        ? <Form onSubmit={onSubmit} currentUser={currentUser} />\n        : <SignIn/>\n      }\n    </main>\n  );\n}\n\nApp.propTypes = {\n  contract: PropTypes.shape({\n    hello: PropTypes.func.isRequired\n  }).isRequired,\n  currentUser: PropTypes.shape({\n    accountId: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired\n  }),\n  nearConfig: PropTypes.shape({\n    contractName: PropTypes.string.isRequired\n  }).isRequired,\n  wallet: PropTypes.shape({\n    requestSignIn: PropTypes.func.isRequired,\n    signOut: PropTypes.func.isRequired\n  }).isRequired\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from \"react-router-dom\";\nimport App from './App';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\n\n// Initializing contract\nasync function initContract() {\n  \n  // get network configuration values from config.js\n  // based on the network ID we pass to getConfig()\n  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');\n\n  // create a keyStore for signing transactions using the user's key\n  // which is located in the browser local storage after user logs in\n  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n\n  // Initializing connection to the NEAR testnet\n  const near = await nearAPI.connect({ keyStore, ...nearConfig });\n\n  // Initialize wallet connection\n  const walletConnection = new nearAPI.WalletConnection(near);\n\n  // Load in user's account data\n  let currentUser;\n  if (walletConnection.getAccountId()) {\n    currentUser = {\n      // Gets the accountId as a string\n      accountId: walletConnection.getAccountId(),\n      // Gets the user's token balance\n      balance: (await walletConnection.account().state()).amount,\n    };\n  }\n\n  // Initializing our contract APIs by contract name and configuration\n  const contract = await new nearAPI.Contract(\n    // User's accountId as a string\n    walletConnection.account(),\n    // accountId of the contract we will be loading\n    // NOTE: All contracts on NEAR are deployed to an account and\n    // accounts can only have one contract deployed to them.\n    nearConfig.contractName,\n    {\n      // View methods are read-only – they don't modify the state, but usually return some value\n      viewMethods: ['get_last_message'],\n      // Change methods can modify the state, but you don't receive the returned value when called\n      changeMethods: ['hello', 'remember_me'],\n      // Sender is the account ID to initialize transactions.\n      // getAccountId() will return empty string if user is still unauthorized\n      sender: walletConnection.getAccountId(),\n    }\n  );\n  \n  const provider = near.connection.provider;\n  \n  return { contract, currentUser, nearConfig, walletConnection, provider };\n}\n\nwindow.nearInitPromise = initContract().then(\n  ({ contract, currentUser, nearConfig, walletConnection, provider }) => {\n    let urlParams = new URLSearchParams(window.location.search);\n    let lastTransaction;\n    if(urlParams.has('transactionHashes')){\n        lastTransaction = urlParams.get('transactionHashes');\n    }\n    let errorMessage;\n    if(urlParams.has('errorMessage')){\n        errorMessage = urlParams.get('errorMessage');\n    }\n    ReactDOM.render(\n\t  <Router>\n        <App\n          contract={contract}\n          currentUser={currentUser}\n          nearConfig={nearConfig}\n          wallet={walletConnection}\n          lastTransaction={lastTransaction}\n          provider={provider}\n          errorMessage={errorMessage}\n        />\n\t  </Router>,\n      document.getElementById('root')\n    );\n  }\n);\n\n","const CONTRACT_NAME = process.env.CONTRACT_NAME || 'hello.cryptosketches.testnet';\n\nfunction getConfig(env) {\n  switch(env) {\n    case 'production':\n    case 'mainnet':\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org'\n      };\n    case 'development':\n    case 'testnet':\n      return {\n        networkId: 'testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.testnet.near.org',\n        helperUrl: 'https://helper.testnet.near.org'\n      };\n    case 'betanet':\n      return {\n        networkId: 'betanet',\n        nodeUrl: 'https://rpc.betanet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.betanet.near.org',\n        helperUrl: 'https://helper.betanet.near.org'\n      };\n    case 'local':\n      return {\n        networkId: 'local',\n        nodeUrl: 'http://localhost:3030',\n        keyPath: `${process.env.HOME}/.near/validator_key.json`,\n        walletUrl: 'http://localhost:4000/wallet',\n        contractName: CONTRACT_NAME\n      };\n    case 'test':\n    case 'ci':\n      return {\n        networkId: 'shared-test',\n        nodeUrl: 'https://rpc.ci-testnet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    case 'ci-betanet':\n      return {\n        networkId: 'shared-test-staging',\n        nodeUrl: 'https://rpc.ci-betanet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    default:\n      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);\n  }\n}\n\nmodule.exports = getConfig;\n"],"sourceRoot":""}